ext {
  adpCoreVersion = project.hasProperty('adpCoreVersion') ? project.getProperty('adpCoreVersion') : '3.6-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '3.6-SNAPSHOT'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'
  componentName='WilliamBL/Run Process Service'
  slf4jVersion = '1.7.12'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "jacoco"

sourceCompatibility = 1.8
group   = 'com.williambl'
version = releaseVersion
def versionDir = "$buildDir/version"

// In this section you declare where to find the dependencies of your project
repositories {
  maven { url "$defaultNexusRepo" }
  maven { url "https://development.adaptris.net/nexus/content/groups/public" }
  maven { url "https://development.adaptris.net/nexus/content/repositories/snapshots" }
  maven { url "https://development.adaptris.net/nexus/content/repositories/releases" }
}


configurations {
  javadoc {}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  compile ("com.adaptris:adp-core:$adpCoreVersion") { changing= true}
  compile ("org.slf4j:slf4j-api:$slf4jVersion")

  testCompile ('junit:junit:4.11')
  testCompile ("com.adaptris:adp-stubs:$adpCoreVersion") { changing= true}

  javadoc("com.adaptris:adp-core-apt:$adpCoreVersion") { changing= true}

}


jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName)
  }
}


sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}
// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'build.version', value: releaseVersion)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
    }
  }
}

javadoc {
  configure(options) {
    links = [
            "http://development.adaptris.com/javadocs/v3-snapshot/Interlok-API/",
            "http://development.adaptris.net/javadocs/v3-snapshot/Interlok-Common/",
    ]
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
  }
}

jacoco {
  toolVersion="0.7.7.201606060606"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
}
